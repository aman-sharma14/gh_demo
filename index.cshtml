@page
@model Todo.Pages.IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1 class="text-center">Your Tasks</h1>

<div>
    <button class="btn btn-primary" type="button" id="addTask">
        Add Task
    </button>

    @* This div contains the form for adding a new task. It's hidden by default. *@
    <div id="TaskFormDiv" style="display:none" class="mt-3 p-3 border rounded">
        <button id="close" type="button" class="btn-close float-end" aria-label="Close"></button>
        <form id="TaskForm">
            @* The AntiForgeryToken is crucial for security. It prevents cross-site request forgery (CSRF) attacks. We'll send this token with our AJAX requests. *@
            @Html.AntiForgeryToken()
            <div class="mb-3">
                <label for="title" class="form-label">Title</label>
                <input type="text" name="title" value="" placeholder="Enter your task" class="form-control" required/>
            </div>
            
            <button id="submitBtn" class="btn btn-primary" type="submit">Submit</button>
        </form>
    </div>

    @* This div will be the container for our list of tasks. *@
    <div id="TaskLists" class="container mt-4">
        <div class="row" id="tasks">
            @* This loop initially populates the page with tasks from the database when the page first loads. *@
            @foreach (var item in Model.TodoItem)
            {
                <div id="@item.Id" data-id="@item.Id" class="card taskItem col-md-3 m-2">
                    <div class="card-body">
                         @* The 'text-decoration-line-through' class is conditionally added to strike through completed tasks. *@
                        <h5 class="card-title @(item.IsCompleted ? "text-decoration-line-through" : "")">@item.Title</h5>
                        <div class="form-check">
                            @* 'data-id' attribute stores the task's ID, which we can easily grab with jQuery. *@
                            <input type="checkbox" data-id="@item.Id" class="form-check-input task-checkbox" @(item.IsCompleted ? "checked" : "") />
                            <label class="form-check-label">@(item.IsCompleted ? "Completed" : "Pending")</label>
                        </div>
                        <p class="card-text"><small class="text-muted">Created: @item.CreatedAt.ToShortDateString()</small></p>
                        <button data-id="@item.Id" class="btn btn-danger btn-sm delete-task">
                            Delete
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts{
    <script>
        // This is the entry point for jQuery. It ensures the code inside runs only after the entire page (DOM) is fully loaded.
        $(document).ready(function(){
            
            // --- Event Handlers for UI Interaction ---

            // Show the 'Add Task' form when the button is clicked.
            $('#addTask').on('click', function(){
                $('#TaskFormDiv').show();
            });

            // Hide the 'Add Task' form when the close button is clicked.
            $('#close').on('click', function(){
                $('#TaskFormDiv').hide();
            });

            // --- AJAX Call to ADD a New Task ---

            // Intercept the form's submit event.
            $('#TaskForm').on('submit', function(event){
                // This is critical for AJAX. It prevents the browser's default form submission behavior, which would cause a full page reload.
                event.preventDefault();

                // This is the AJAX request to the server.
                $.ajax({
                    type: "POST", // The HTTP method.
                    url: "?handler=AddTask", // The URL points to a specific 'Handler Method' in our C# code-behind file.
                    data: $(this).serialize(), // .serialize() is a jQuery helper that packages all form data (title, token) into a string for sending.
                    headers: {
                        // We must include the AntiForgeryToken in the request header for security.
                        RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    // This 'success' function is the callback that runs if the server responds successfully (HTTP 200).
                    success: function(response){
                        if(response.success){
                            $('#TaskFormDiv').hide(); // Hide the form on success.
                            $('#TaskForm')[0].reset(); // Reset the form fields.
                            fetchTasks(); // Reload the task list to show the new task.
                        } else {
                            alert(response.message); // Show error message from the server if something went wrong.
                        }
                    },
                    // This 'error' function runs if the AJAX call fails (e.g., network issue, server error).
                    error: function(){
                        alert("An unexpected error occurred.");
                    }
                });
            });

            // --- AJAX Call to TOGGLE Task Completion Status (Event Delegation) ---

            // IMPORTANT: This uses event delegation. The click listener is attached to the parent container '#tasks'.
            // This allows the event to work for tasks added dynamically *after* the page loads.
            $('#tasks').on('change', '.task-checkbox', function () {
                var checkbox = $(this); // 'this' refers to the specific checkbox that was changed.
                var taskId = checkbox.data('id'); // Get the task ID from the 'data-id' attribute.

                $.ajax({
                    type: 'POST',
                    url: '?handler=ToggleTask',
                    data: { id: taskId }, // Send just the ID of the task to be updated.
                    headers: {
                        RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            // On success, update the UI immediately for a responsive feel.
                            // 1. Toggle the strikethrough style on the title.
                            checkbox.closest('.taskItem').find('.card-title').toggleClass('text-decoration-line-through');
                            // 2. Update the status text next to the checkbox.
                            var label = checkbox.siblings('label');
                            label.text(checkbox.is(':checked') ? "Completed" : "Pending");
                        } else {
                            alert("Failed to update task status.");
                            checkbox.prop('checked', !checkbox.prop('checked')); // Revert the checkbox if the update failed.
                        }
                    },
                    error: function () {
                        alert("Error updating task.");
                    }
                });
            });

            // --- AJAX Call to DELETE a Task (Event Delegation) ---

            // Also uses event delegation for the same reason as the toggle handler.
            $('#tasks').on('click', '.delete-task', function () {
                var btn = $(this); // 'this' refers to the specific delete button clicked.
                var taskId = btn.data('id');

                if (confirm("Are you sure you want to delete this task?")) {
                    $.ajax({
                        type: 'POST',
                        url: '?handler=DeleteTask',
                        data: { id: taskId },
                        headers: {
                            RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function (response) {
                            if (response.success) {
                                // On success, visually remove the task from the page with a fade-out effect.
                                btn.closest('.taskItem').fadeOut(500, function() {
                                    $(this).remove();
                                });
                            } else {
                                alert("Error deleting task.");
                            }
                        },
                        error: function () {
                            alert("An unexpected error occurred.");
                        }
                    });
                }
            });

            // --- Function to REFRESH the Task List via AJAX ---

            // This function fetches all tasks from the server and rebuilds the task list HTML.
            function fetchTasks(){
                $.ajax({
                    type: "GET", // Use GET since we are only retrieving data.
                    url: "?handler=FetchTasks",
                    success: function (tasks){
                        var tasklist = $('#tasks');
                        tasklist.empty(); // Clear the current list to prevent duplicates.

                        // Loop through the array of task objects returned from the server.
                        $.each(tasks, function(index, task){
                            const isChecked = task.isCompleted ? "checked" : "";
                            const isCompletedText = task.isCompleted ? "Completed" : "Pending";
                            const textClass = task.isCompleted ? "text-decoration-line-through" : "";
                            const createdDate = new Date(task.createdAt).toLocaleDateString();

                            // Build the HTML for a single task card using a template literal.
                            const taskCard = `
                                <div id="${task.id}" data-id="${task.id}" class="card taskItem col-md-3 m-2">
                                    <div class="card-body">
                                        <h5 class="card-title ${textClass}">${task.title}</h5>
                                        <div class="form-check">
                                            <input type="checkbox" data-id="${task.id}" class="form-check-input task-checkbox" ${isChecked} />
                                            <label class="form-check-label">${isCompletedText}</label>
                                        </div>
                                        <p class="card-text"><small class="text-muted">Created: ${createdDate}</small></p>
                                        <button data-id="${task.id}" class="btn btn-danger btn-sm delete-task">
                                            Delete
                                        </button>
                                    </div>
                                </div>
                            `;
                            // Add the newly created card to the container.
                            tasklist.append(taskCard);
                        });
                    }
                });
            }
        });
    </script>
}
